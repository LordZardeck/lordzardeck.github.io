<?xml version="1.0" encoding="utf-8"?> <feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><title type="text">Sean Templeton: Web Developer</title> <generator uri="https://github.com/jekyll/jekyll">Jekyll</generator><link rel="self" type="application/atom+xml" href="https://templeton.io/feed.xml"/><link rel="alternate" type="text/html" href="https://templeton.io"/> <updated>2016-03-30T23:41:17-06:00</updated> <id>https://templeton.io/</id> <author> <name>Sean Templeton</name> <uri>https://templeton.io/</uri> <email>sean@templeton.io</email> </author><entry><title type="html"><![CDATA[How to Setup Local Development of Facebook's Real-Time API]]></title><link rel="alternate" type="text/html" href="https://templeton.io/local-facebook-real-time-api/"/> <id>https://templeton.io/local-facebook-real-time-api</id> <published>2016-03-10T00:00:00-07:00</published> <updated>2016-03-10T00:00:00-07:00</updated> <author> <name>Sean Templeton</name> <uri>https://templeton.io</uri> <email>sean@templeton.io</email> </author> <content type="html"> &lt;p&gt;Developing against facebook’s real-time webhooks requires a static url utilizing SSL. This may seem impossible to do locally, but in a matter of 15 minutes, you can be ready to recieve updates from facebook on your local machine.&lt;/p&gt;&lt;h2 id="requirements"&gt;Requirements&lt;/h2&gt;&lt;p&gt;In order for Facebook’s real-time webhooks to talk to your application, it requires 2 things:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;Static URL to talk to&lt;/li&gt; &lt;li&gt;HTTPS URL&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;Both of these present a huge problem for local development, as you most likely have a dynamic IP for your local network, and SSL’s aren’t cheap, nor are they easy to setup.&lt;/p&gt;&lt;h2 id="static-urls"&gt;Static URLs&lt;/h2&gt;&lt;p&gt;Many people have a use case for needing a static IP for their local network. Whether it be for hosting a gaming server, or a web server, being able to have people connect to your machine from outside your local network can be a necessity.&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.noip.com/"&gt;No-IP&lt;/a&gt; is a service that can help mitigate this issue. It’s an application that you install on your machine, and whenever your ip changes, it updates your hostname so that other people can still access your local servers. By using No-IP, you can give facebook a static URL, and it will always know where to direct traffic.&lt;/p&gt;&lt;h2 id="ssls"&gt;SSLs&lt;/h2&gt;&lt;p&gt;SSLs aren’t cheap, and in addition, they are expensive. Most of the time, you can get away with developing without SSL, just for testing and exploration. Facebook, however, wont’ allow you to connect to their Real-Time webhooks without connecting to your service over SSL.&lt;/p&gt;&lt;p&gt;&lt;a href="https://www.cloudflare.com/"&gt;Cloudflare&lt;/a&gt; is a company that provides a varitey of services related to DNS (domain name services). They also provide “free” share ssl. If you signup with their free plan, you can associate the domain you have from no-ip with a SSL protected domain from cloudflare.&lt;/p&gt;&lt;h2 id="tldr"&gt;TL;DR&lt;/h2&gt;&lt;p&gt;Get a static domain with &lt;a href="http://www.noip.com/"&gt;No-IP&lt;/a&gt; and get it SSL protected with &lt;a href="https://www.cloudflare.com/"&gt;Cloudflare&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="https://templeton.io/local-facebook-real-time-api/"&gt;How to Setup Local Development of Facebook's Real-Time API&lt;/a&gt; was originally published by Sean Templeton at &lt;a href="https://templeton.io"&gt;Sean Templeton: Web Developer&lt;/a&gt; on March 10, 2016.&lt;/p&gt; </content> </entry><entry><title type="html"><![CDATA[PhantomJS 2 in TravisCI]]></title><link rel="alternate" type="text/html" href="https://templeton.io/phantomjs-2-in-travisci/"/> <id>https://templeton.io/phantomjs-2-in-travisci</id> <published>2016-01-21T00:15:18-07:00</published> <updated>2016-01-21T00:15:18-07:00</updated> <author> <name>Sean Templeton</name> <uri>https://templeton.io</uri> <email>sean@templeton.io</email> </author> <content type="html"> &lt;p&gt;We recently added unit tests to our project, and ran them with Karma off of PhantomJS. After hours of frustration we discovered that the 1.x version of PhantomJS did not support some basic ES5 functionality, such as &lt;code&gt;Function.prototype.bind&lt;/code&gt;. We also learned taht there was a 2.x unstable version of PhantomJS that did support this requirement, so we proceeded to update to &lt;code&gt;karma-phantomjs2-launcher&lt;/code&gt;. This all worked fine on our local machines, and we went on our merry way, continuing to add tests.&lt;/p&gt;&lt;p&gt;Once we were finished, we pushed to GitHub our changes, and awaited Travis to show us that beautiful green build notification. Instead we got red.&lt;/p&gt;&lt;p&gt;Unfortuanetly PhantomJS isn’t supported out of the box on Travis. After scouring the dark corners of the web, we gave up trying to get PhantomJS 2 to run on Travis’ containers and reverted back to their legacy system, installing shared library depencies and the like, and finally got our builds working. Although they took &lt;em&gt;forever&lt;/em&gt; to run.&lt;/p&gt;&lt;h2 id="light-at-the-end-of-the-tunnel"&gt;Light at the end of the tunnel&lt;/h2&gt;&lt;p&gt;After being frustrated by the recent issues with Travis not building legacy builds, I took up arms again and fought to find a solution to running PhantomJS 2 on Travis containers. A Travis representitve offered a snippet of code to go our &lt;code&gt;.travis.yml&lt;/code&gt; file, but no such luck.&lt;/p&gt;&lt;blockquote&gt; &lt;p&gt;Addition to .travis.yml file from Travis representitive:&lt;/p&gt; &lt;/blockquote&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span class="l-Scalar-Plain"&gt;install&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;mkdir travis-phantomjs&lt;/span&gt; &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;wget https://s3.amazonaws.com/travis-phantomjs/phantomjs-2.0.0-ubuntu-12.04.tar.bz2 -O $PWD/travis-phantomjs/phantomjs-2.0.0-ubuntu-12.04.tar.bz2&lt;/span&gt; &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;tar -xvf $PWD/travis-phantomjs/phantomjs-2.0.0-ubuntu-12.04.tar.bz2 -C $PWD/travis-phantomjs&lt;/span&gt; &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;export PATH=$PWD/travis-phantomjs:$PATH&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After continuing the discussion, they pointed out the fact that one of our node modules was re-installing PhantomJS, back to an unsupported build. That’s when things started rolling toward victory.&lt;/p&gt;&lt;h1 id="the-final-solution"&gt;The final solution&lt;/h1&gt;&lt;p&gt;After exploring the packages installed by &lt;code&gt;karma-phantomjs2-launcher&lt;/code&gt;, I came across the &lt;code&gt;phantomjs-ext&lt;/code&gt; package and their npm page: https://www.npmjs.com/package/phantomjs2-ext. Reading through the docs, I noticed we could specify a custom version through an environment variable. Sure enough, specifying version &lt;code&gt;2.0.0&lt;/code&gt; for &lt;code&gt;PHANTOMJS2_VERSION&lt;/code&gt; in travis’s environment variables unlocked the blazing speed of contianers. Our quest was over.&lt;/p&gt;&lt;h1 id="tldr"&gt;TL;DR&lt;/h1&gt;&lt;p&gt;So if you are looking to add PhantomJS 2 to your Travis builds, there are 2 things you need to do:&lt;/p&gt;&lt;ol&gt; &lt;li&gt;Install the supported build of PhantomJS 2 from travis’s s3 bucket and add it to the path&lt;/li&gt; &lt;li&gt;Add an environment variable to Travis specifying the PhantomJS version you installed&lt;/li&gt; &lt;/ol&gt;&lt;h2 id="travisyml-file"&gt;.travis.yml file&lt;/h2&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span class="l-Scalar-Plain"&gt;install&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;mkdir travis-phantomjs&lt;/span&gt; &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;wget https://s3.amazonaws.com/travis-phantomjs/phantomjs-2.0.0-ubuntu-12.04.tar.bz2 -O $PWD/travis-phantomjs/phantomjs-2.0.0-ubuntu-12.04.tar.bz2&lt;/span&gt; &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;tar -xvf $PWD/travis-phantomjs/phantomjs-2.0.0-ubuntu-12.04.tar.bz2 -C $PWD/travis-phantomjs&lt;/span&gt; &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;export PATH=$PWD/travis-phantomjs:$PATH&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="travis-environment-variable"&gt;Travis environment variable&lt;/h2&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="nv"&gt;PHANTOMJS2_VERSION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;2.0.0&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href="https://templeton.io/phantomjs-2-in-travisci/"&gt;PhantomJS 2 in TravisCI&lt;/a&gt; was originally published by Sean Templeton at &lt;a href="https://templeton.io"&gt;Sean Templeton: Web Developer&lt;/a&gt; on January 21, 2016.&lt;/p&gt; </content> </entry><entry><title type="html"><![CDATA[LESS vs SASS - Why to Use Them and Which to Use]]></title><link rel="alternate" type="text/html" href="https://templeton.io/less-vs-sass-scss-why-which/"/> <id>https://templeton.io/less-vs-sass-scss-why-which</id> <published>2013-12-21T00:00:00-07:00</published> <updated>2013-12-21T00:00:00-07:00</updated> <author> <name>Sean Templeton</name> <uri>https://templeton.io</uri> <email>sean@templeton.io</email> </author> <content type="html"> &lt;section id="table-of-contents" class="toc"&gt; &lt;header&gt; &lt;h3&gt;Overview&lt;/h3&gt; &lt;/header&gt; &lt;div id="drawer"&gt; &lt;ul id="markdown-toc"&gt; &lt;li&gt;&lt;a href="#less-and-sass-overview" id="markdown-toc-less-and-sass-overview"&gt;LESS and SASS Overview&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#primary-features" id="markdown-toc-primary-features"&gt;Primary Features&lt;/a&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="#nesting-inheritance" id="markdown-toc-nesting-inheritance"&gt;Nesting (Inheritance)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#variables" id="markdown-toc-variables"&gt;Variables&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#mixins" id="markdown-toc-mixins"&gt;Mixins&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;a href="#differences" id="markdown-toc-differences"&gt;Differences&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#which-to-use" id="markdown-toc-which-to-use"&gt;Which to Use?&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;&lt;/div&gt; &lt;/section&gt; &lt;!-- /#table-of-contents --&gt;&lt;h2 id="less-and-sass-overview"&gt;LESS and SASS Overview&lt;/h2&gt;&lt;p&gt;LESS and SASS (or SCSS) are High-level dynamic stylesheet languages created to help create cleaner and more modular stylesheets. SCSS is the predecessor to SASS, providing native CSS support. This means, like LESS, SCSS is a superset of CSS, allowing CSS to be “dropped in” and still be valid at compile time. With this functionality, development integration to pre-existing styles becomes quick and painless.&lt;/p&gt;&lt;h1 id="primary-features"&gt;Primary Features&lt;/h1&gt;&lt;p&gt;Some of the main features that LESS and SASS provide are: variables, nesting (or inheritance), &amp;amp; mixins. These solve a variety of problems that plain CSS creates. In addition, these two languages allow “normal” css to be used withing their language. This means that porting is easy as even if you only modify a few lines, the whole stylesheet is still valid.&lt;/p&gt;&lt;h2 id="nesting-inheritance"&gt;Nesting (Inheritance)&lt;/h2&gt;&lt;p&gt;For example, say you wanted to set the property of a child element of a parent element. You would have to define in a single line both the parent element and the child element. If you then wanted to set the property of another child element, you would again have to copy the parent’s identity in addition to the child’s.&lt;/p&gt;&lt;p&gt;For small CSS projects this may seem acceptable, and in reality it is. What happens, though, for large websites and applications? You have a very large CSS code base with duplicated styles. This easily becomes hard to manage, modify, and extend. In addition, imagine you decide you need to namespace it to allow external CSS stylesheets to work with your current styles. You would have to go through each and every line to add your namespacing scope. If any classes change, again you would have to go through very many lines to change them.&lt;/p&gt;&lt;p&gt;How does this work exactly? Look at the before and example below. You can easily see how, in addition to increasing maintainability, the code is much easier to read and understand.&lt;/p&gt;&lt;div&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;CSS:&lt;/strong&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-css" data-lang="css"&gt;&lt;span class="c"&gt;/**&lt;/span&gt; &lt;span class="c"&gt; * Project is namespaced as &amp;quot;my-project&amp;quot;&lt;/span&gt; &lt;span class="c"&gt; */&lt;/span&gt;&lt;span class="nc"&gt;.my-project.my-project-container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;width&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1000px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="nc"&gt;.my-project.my-project-container&lt;/span&gt; &lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;.my-project.my-project-container&lt;/span&gt; &lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;.my-project.my-project-container&lt;/span&gt; &lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;.my-project.my-project-container&lt;/span&gt; &lt;span class="nt"&gt;h4&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;.my-project.my-project-container&lt;/span&gt; &lt;span class="nt"&gt;h5&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;margin&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ff0000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;font-weight&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;LESS:&lt;/strong&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-scss" data-lang="scss"&gt;&lt;span class="cm"&gt;/**&lt;/span&gt; &lt;span class="cm"&gt; * Project is namespaced as &amp;quot;my-project&amp;quot;&lt;/span&gt; &lt;span class="cm"&gt; */&lt;/span&gt;&lt;span class="nc"&gt;.my-project&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nc"&gt;.my-project-container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;h4&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;h5&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;margin&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#ff0000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="na"&gt;font-weight&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="no"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you can clearly see, by nesting you can easily create a hierarchy of style rules that becomes easy to modify and extend.&lt;/p&gt;&lt;h2 id="variables"&gt;Variables&lt;/h2&gt;&lt;p&gt;Variables are another great feature that both LESS and SASS provide. Simply stated, you can define any CSS property value in a variable and re-use that value across all stylesheets. This makes making changes to things such as colors across an entire site as simple as editing the one variable.&lt;/p&gt;&lt;h2 id="mixins"&gt;Mixins&lt;/h2&gt;&lt;p&gt;The final of the 3 major features that both LESS and SASS provide are mixins. Mixins allow you to re-use classes within other CSS rules. Mixins also allow for variables to be passed in  to modify the way that mixin outputs CSS, similar to a function. Below are examples from their respective websites of mixins in both LESS and SASS.&lt;/p&gt;&lt;div&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;LESS&lt;/strong&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-scss" data-lang="scss"&gt;&lt;span class="na"&gt;.rounded-corners(@radius&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;border-radius&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="na"&gt;-webkit-border-radius&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="na"&gt;-moz-border-radius&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nn"&gt;#header&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nc"&gt;.rounded-corners&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nn"&gt;#footer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nc"&gt;.rounded-corners&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;10px&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;SASS&lt;/strong&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="language-scss" data-lang="scss"&gt;&lt;span class="k"&gt;@mixin&lt;/span&gt;&lt;span class="nf"&gt; border-radius&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$radius&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;-webkit-border-radius&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$radius&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="na"&gt;-moz-border-radius&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$radius&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="na"&gt;-ms-border-radius&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$radius&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="na"&gt;-o-border-radius&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$radius&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="na"&gt;border-radius&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$radius&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nc"&gt;.box&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;@include&lt;/span&gt;&lt;span class="nd"&gt; border-radius&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id="differences"&gt;Differences&lt;/h1&gt;&lt;p&gt;LESS and SASS are very powerful languages and are very similar in feature sets. In fact, at this time as far as I can tell, neither has a major benefit over the other. LESS does provide client side compilation, but that feature is limited and not as useful. So what are the differences? Syntax.&lt;/p&gt;&lt;p&gt;LESS is true to it’s name when it comes to its syntax. LESS looks almost identical to CSS, therefore the learning curve is very low. With few keywords and the logic language being the familiar JavaScript, it is excellent for quick integration without any history with CSS superset languages. Variables are defined with the “@” symbol, and mixins are just classes with arguments.&lt;/p&gt;&lt;p&gt;SASS on the other hand has a very defined language structure. They have more than a few reserved words and have a specific way of utilizing functions and mixins. They also have their own logic framework, meaning they have their own language spec on how to do loops and conditional statements.&lt;/p&gt;&lt;h1 id="which-to-use"&gt;Which to Use?&lt;/h1&gt;&lt;p&gt;In terms of features and power, it’s a definitive tie. You might go with LESS if you would like to test using the client-side loading feature of the LESS instead of compiling each time you modify the stylesheets.&lt;/p&gt;&lt;p&gt;The only reason to choose one over the other is really a matter of preference. Each language has very different language syntax. LESS leans toward being more easy to catch on, even for designers. Unless you have a team already familiar with SASS, my recommendation would be to check out LESS.&lt;/p&gt;&lt;p&gt;&lt;a href="https://templeton.io/less-vs-sass-scss-why-which/"&gt;LESS vs SASS - Why to Use Them and Which to Use&lt;/a&gt; was originally published by Sean Templeton at &lt;a href="https://templeton.io"&gt;Sean Templeton: Web Developer&lt;/a&gt; on December 21, 2013.&lt;/p&gt; </content> </entry></feed>